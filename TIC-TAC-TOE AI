import tkinter as tk
import math

# Initialize the board as a list of empty strings
board = [""] * 9

# Function to check if there's a winner
def check_winner(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
        [0, 4, 8], [2, 4, 6]              # diagonals
    ]
    
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != "":
            return board[combo[0]]
    return None

# Function to check if the board is full
def is_board_full(board):
    return "" not in board

# Minimax algorithm to find the best move for the AI
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    
    if winner == "X":
        return -1  # Human wins
    if winner == "O":
        return 1   # AI wins
    if is_board_full(board):
        return 0   # Draw
    
    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == "":
                board[i] = "O"
                score = minimax(board, depth + 1, False)
                board[i] = ""
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == "":
                board[i] = "X"
                score = minimax(board, depth + 1, True)
                board[i] = ""
                best_score = min(score, best_score)
        return best_score

# Function to find the best move for the AI
def best_move():
    best_score = -math.inf
    move = -1
    for i in range(9):
        if board[i] == "":
            board[i] = "O"
            score = minimax(board, 0, False)
            board[i] = ""
            if score > best_score:
                best_score = score
                move = i
    return move

# Function to handle button click
def on_click(index):
    if board[index] == "" and not check_winner(board):
        # Human move
        board[index] = "X"
        buttons[index].config(text="X")
        
        if check_winner(board):
            result_label.config(text="Congratulations! You win!")
        elif is_board_full(board):
            result_label.config(text="It's a draw!")
        else:
            # AI move
            ai_index = best_move()
            board[ai_index] = "O"
            buttons[ai_index].config(text="O")
            
            if check_winner(board):
                result_label.config(text="The AI wins! Better luck next time.")
            elif is_board_full(board):
                result_label.config(text="It's a draw!")

# Function to reset the game
def reset_game():
    global board
    board = [""] * 9
    for button in buttons:
        button.config(text="")
    result_label.config(text="")

# Create the main window
window = tk.Tk()
window.title("Tic-Tac-Toe")

# Create a grid of buttons
buttons = []
for i in range(9):
    button = tk.Button(window, text="", width=10, height=3, font=("Arial", 24),
                       command=lambda i=i: on_click(i))
    button.grid(row=i//3, column=i%3)
    buttons.append(button)

# Label to show the result
result_label = tk.Label(window, text="", font=("Arial", 18))
result_label.grid(row=3, column=0, columnspan=3)

# Reset button
reset_button = tk.Button(window, text="Reset", font=("Arial", 18), command=reset_game)
reset_button.grid(row=4, column=0, columnspan=3)

# Start the GUI event loop
window.mainloop()
